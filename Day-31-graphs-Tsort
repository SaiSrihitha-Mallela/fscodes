given a graph(V) and N Edges print the Topolical Order of the Graph



The first line of input contains the Number of Vertices followed by the Number of Edges and Edges between the Vertices 

input = 
5 7
0 2
0 3
1 0
1 3
2 4
3 2
3 4
output = 
1 0 3 2 4


    ----------------------------------------------------------------------------------------------------------
Parallel Courses

/*Parallel Courses: 
 
➢ You are given an integer N which denotes the number of courses numbered from 1 to N and a 
matrix ‘prerequisites’, in which each row contains exactly two integers ‘A’ and ‘B’ which 
represents the course ‘A’ has to be studied in some semester before studying course ‘B’. 
➢ In one semester, you can take at most k courses as long as you have taken all the prerequisites 
in the previous semesters for the courses you are taking. 
➢ You are supposed to find the minimum number of semesters required to study all the courses. 
If it is impossible to study all the courses, then return -1. 
Note: 
There is a limit on taking the number of courses in a particular semester as long as all the prerequisites 
for taking the course are satisfied. 
Input Format: 
➢ The first line represents N, which denotes the number of courses 
➢ The second line represents M, which denotes the number of rows of the matrix prerequisites. 
➢ The next M lines contain two integers, prerequisites[i][0] and prerequisites[i][1], denoting that prerequisites[i][0] has to be studied before prerequisites[i][1]. 
➢ Last line k, denotes number of courses can be taken in a semester. 
 
Output Format: 
➢ Print the minimum number of semesters required to study all the courses. 
 
Input: n = 4,  
m = 3 
prerequisites =  
2 1 
3 1 
1 4 
k = 2 
Output: 3 
Explanation:  
In the first semester, you can take courses 2 and 3. 
In the second semester, you can take course 1. 
In the third semester, you can take course 4. 
 

Sample Test Case-1: 
Input = 4 
3 
2 1 
3 1 
4 1 
2       
Output: 3 
 
Sample Test Case-2: 
Input = 4 
3 
1 3 
2 3 
3 1 
3 
Output: -1 

For all Boundary Conditions Print -1

Constraints: 
1<= T <= 50 
1 <= N <= 20000 
0 <= M <= 20000 
1 <= prerequisites[i][0], prerequisites[i][1] <= N 
Prerequisites[i][0] != prerequisites[i][1], for any valid i 
*/



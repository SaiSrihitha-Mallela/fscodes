given a graph(V) and N Edges print the Topolical Order of the Graph



The first line of input contains the Number of Vertices followed by the Number of Edges and Edges between the Vertices 

input = 
5 7
0 2
0 3
1 0
1 3
2 4
3 2
3 4
output = 
1 0 3 2 4


    ----------------------------------------------------------------------------------------------------------
Parallel Courses

/*Parallel Courses: 
 
➢ You are given an integer N which denotes the number of courses numbered from 1 to N and a 
matrix ‘prerequisites’, in which each row contains exactly two integers ‘A’ and ‘B’ which 
represents the course ‘A’ has to be studied in some semester before studying course ‘B’. 
➢ In one semester, you can take at most k courses as long as you have taken all the prerequisites 
in the previous semesters for the courses you are taking. 
➢ You are supposed to find the minimum number of semesters required to study all the courses. 
If it is impossible to study all the courses, then return -1. 
Note: 
There is a limit on taking the number of courses in a particular semester as long as all the prerequisites 
for taking the course are satisfied. 
Input Format: 
➢ The first line represents N, which denotes the number of courses 
➢ The second line represents M, which denotes the number of rows of the matrix prerequisites. 
➢ The next M lines contain two integers, prerequisites[i][0] and prerequisites[i][1], denoting that prerequisites[i][0] has to be studied before prerequisites[i][1]. 
➢ Last line k, denotes number of courses can be taken in a semester. 
 
Output Format: 
➢ Print the minimum number of semesters required to study all the courses. 
 
Input: n = 4,  
m = 3 
prerequisites =  
2 1 
3 1 
1 4 
k = 2 
Output: 3 
Explanation:  
In the first semester, you can take courses 2 and 3. 
In the second semester, you can take course 1. 
In the third semester, you can take course 4. 
 

Sample Test Case-1: 
Input = 4 
3 
2 1 
3 1 
4 1 
2       
Output: 3 
 
Sample Test Case-2: 
Input = 4 
3 
1 3 
2 3 
3 1 
3 
Output: -1 

For all Boundary Conditions Print -1

Constraints: 
1<= T <= 50 
1 <= N <= 20000 
0 <= M <= 20000 
1 <= prerequisites[i][0], prerequisites[i][1] <= N 
Prerequisites[i][0] != prerequisites[i][1], for any valid i 
*/

You are navigating a spaceship through a galaxy represented as an m x n space map.  
The spaceship starts from the top-left sector (sector[0][0]) and its mission is 
to safely reach the bottom-right sector (sector[m-1][n-1]).

Each sector on the map can either be clear (0) or blocked by an asteroid field (1).  
The spaceship can only move right or downward at any moment.  
It cannot pass through sectors with asteroid fields.

Find the total number of distinct safe routes the spaceship can take to reach 
its destination at the bottom-right corner.


Input format:
-------------
2 space seperated integers, m & n
next m lines representing the Map 

Output format:
--------------
An integer, the total number of distinct safe routes



Example 1:
----------
Input:
3 3
0 0 0
0 1 0
0 0 0

Output:
2

Explanation:  
There’s one asteroid field blocking the center of the 3×3 map.  
Two possible safe navigation paths:
- Move → Move → Down → Down
- Down → Down → Move → Move

Example 2:
---------
Input:
2 2
0 1
0 0

Output:
1


Constraints:
- m == sectorMap.length
- n == sectorMap[i].length
- 1 <= m, n <= 100
- sectorMap[i][j] is either 0 (clear) or 1 (asteroid field)


You are controlling a battlefield represented by an m x n grid. 
Each cell on this grid can be one of the following:

- A reinforced barrier ('B'), blocking your laser.
- An enemy drone ('D'), your target.
- An open cell ('0'), where you can position your robot to fire.

When your robot fires its powerful laser from an open cell, 
the beam destroys all enemy drones in the same row and column 
until the beam hits a barrier ('B'). The barrier completely stops 
the laser, protecting anything behind it.

Your goal is to identify the best position (open cell) to place 
your robot so that firing the laser destroys the maximum number 
of enemy drones in a single shot. Return this maximum number.

Input format:
-------------
Line 1: Two space separated integers, represents m & n
Next M lines: each row of battlefield


Output format:
--------------
An integer, maximum number of enemy drones destroyed in a single shot.

Example 1:
----------
input=
3 4
0 D 0 0
D 0 B D
0 D 0 0

Output=
3

Explanation: placing robot at battlefield[1][1] destroys 3 enemy drones 
in a single shot.

Example 2:
----------
3 3
B B B
0 0 0
D D D

Output=
1


Constraints:
- 1 <= m, n <= 500
- battlefield[i][j] is either 'B', 'D', or '0'.



Your playing a game, the game contains m*n grid.
Each cell in the grid represent the health points.
You can move one step either downwads or rightwards only.
Whenever you visit a cell in the grid, you will lose the 
same health points of the cell.

You will start at (0,0) cell of the grid and have to reach (m-1)*(n-1) cell.
Your task is to minimize the loss of overall health points.

Input Format:
-------------
Line-1: Two integers M and N.
Next M lines: N space separated integers, health points in each row of the grid.

Output Format:
--------------
Print an integer, minimal loss of overall health points.


Sample Input-1:
---------------
3 3
1 3 1
1 5 1
4 2 1

Sample Output-1:
----------------
7

Explanation:
------------
start at cell(0,0) =>  1→3→1→1→1 minimizes the loss of health points.


Sample Input-2:
---------------
4 4
8 6 9 3
7 6 2 1
5 5 7 9
8 9 6 2

Sample Output-2:
----------------
34

Explanation:
------------
start at cell(0,0) =>  8→6→6→2→1→9→2 minimizes the loss of health points.

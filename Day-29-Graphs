P-1 Connected Components_DFS

You are given an undirected graph with n nodes labeled from 0 to n - 1 and a list of e edges where each edge connects two nodes. 
Your task is to determine the number of connected components in the graph.

A connected component is a set of nodes such that there is a path between any two nodes in this set
and the set is not connected to any other node outside it.

Input Format:
-----------
- An integer n representing the number of nodes in the graph.
- An integer e representing the number of edges.
- e lines follow, each containing two integers u and v representing an undirected edge between node u and node v.

Output Format:
-------------
- A single integer representing the number of connected components in the graph.

Constraints:
-------------
- 1 <= n <= 2000
- 0 <= e <= n * (n - 1) / 2
- 0 <= u, v < n
- No duplicate edges or self-loops.

Sample Input:
-------------
5
3
0 1
1 2
3 4

Sample Output:
--------------
2

Explanation:
-------------
- Component 1: Nodes 0, 1, 2 are connected.
- Component 2: Nodes 3 and 4 are connected.
- Node 5 is not part of any edge and forms its own component if n were larger.



-------------------------------------------------------------------------------------------------------------------------------------------
P-2 ConnectedComponents_BFS


You are given an undirected graph represented by n nodes numbered from 0 to n-1, and a list of e edges, where each edge connects two nodes.

Your task is to implement a program that calculates the total number of connected components in the graph. 
A connected component is a group of nodes such that there is a path between any two nodes with in the group
and no node in the group is connected to any node outside of it.

Your program should use Breadth-First Search (BFS) to explore the graph.

Input Format:
------------

- The first line contains two integers n and e — the number of nodes and edges.
- The next e lines each contain two integers u and v, indicating that there is an undirected edge between node u and node v.

Output Format:
--------------
- Output a single integer — the number of connected components in the graph.

Constraints:
------------
- 1≤ n ≤10000 
- 0≤ e ≤100000 
- 0≤ u,v <n

Example Input:
-------------
6 4
0 1
1 2
3 4
4 5

Example Output:
--------------
2

Explanation:
------------
There are two connected components in the graph:

- Component 1: {0, 1, 2}
- Component 2: {3, 4, 5}
----------------------------------------------------------------------------------------------------------------------------------------------------


P-3 FindingBridges

In an undirected graph, a bridge (also known as a cut-edge) is an edge that, when removed, increases the number of connected components in the graph. 
In other words, removing a bridge disconnects part of the graph.

You are given an undirected graph with V vertices and E edges.
Your task is to identify and print all the bridges in the graph using Depth-First Search (DFS).

Input Format:
------------
- The first line contains two integers V and E — the number of vertices and edges.
- The next E lines each contain two integers u and v, denoting an undirected edge between vertex u and vertex v.

Output Format:
--------------
- Print the edges that are bridges in the graph.
- Each bridge should be printed as a pair of vertices: u v.
- If there are no bridges, the output should be empty.
- Order of output does not matter.

Constraints:
-------------
- 1≤ V ≤10000 
- 0≤ E ≤100000 
- 0≤ u,v <V
- The graph may be disconnected.
- No multiple edges or self-loops.

Example Input 1:
----------------
5 5
1 0
0 2
2 1
0 3
3 4

Example Output 1:
----------------
3 4
0 3

Explanation:
-------------
Removing edge 3 4 disconnects node 4. Similarly, removing edge 0 3 disconnects node 3. These are bridges.
However, edges like 1 0, 0 2, and 2 1 are not bridges because there are alternative paths to maintain connectivity.

Note:
-----
- The program uses Tarjan’s Algorithm for bridge detection, which uses discovery times and low values during DFS traversal.
- The edge list in the output does not need to be sorted.

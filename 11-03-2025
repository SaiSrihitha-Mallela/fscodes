Malika taught a new fun time program practice for Engineering Students.
As a part of this she has given set of N numbers, and asked the students 
to perform the operations listed below:
1. sumRange(start, end) - return the sum of numbers between the indices start and end, both are inclusive.
2. update(ind, val) - update the value at the index 'ind' to 'val'.

Your task is to solve this problem using Segment Tree concept.

Input Format:
-------------
Line-1: Two integers N and Q, size of the array(set of numbers) and query count.
Line-2: N space separated integers.
next Q lines: Three integers option, start/ind and end/val.

Output Format:
--------------
An integer result, for every sumRange query.


Sample Input:
-------------
8 5
4 2 13 4 25 16 17 8
1 2 6		//sumRange
1 0 7		//sumRange
2 2 18	//update
2 4 17	//update
1 2 7		//sumRange

8 5
4 2 13 4 25 16 17 8
1 2 6		
1 0 7		
2 2 18	
2 4 17	
1 2 7	

Sample Output:
--------------
75
89
80


Imagine you are analyzing the popularity of different songs on a music streaming platform. 
Each song has been played a certain number of times, and you have a list of song IDs representing 
these plays.

Your task is to identify the top k most played songs based on their frequency. 
If two songs have been played the same number of times, the song with the higher ID should be prioritized.

Challenge:

Given a list of song IDs representing plays and an integer k, determine the k most popular songs, 
sorted in descending order of play count. If multiple songs have the same number of plays, 
the song with the higher ID should appear first.

Are you ready to rank the top hits?

Input Format:
-------------
Line-1: An integer N, representing the number of elements in the array.
Line-2: A line with N space-separated integers representing the elements of the array.
Line-3: An integer k, representing the number of most frequent elements to return.

Output Format:
--------------
Line-1: An array, comma-separated integers in descending order of frequency. 
If two elements have the same frequency, the higher number should appear first.


Sample Input-1:
--------------
6
1 1 1 2 2 3
2

Sample Output-1:
----------------
[1, 2]


Sample Input-2:
--------------
1
1
1

Sample Output-2:
----------------
[1]



A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. 

He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).

You are given a string answerKey, where answerKey[i] is the original answer to the ith question. 

In addition, you are given an integer k, the maximum number of times you may perform the following operation:

Change the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').
Return the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.

 

Example 1:
Input  = TTFF
2
Output = 4

Explanation: We can replace both the 'F's with 'T's to make answerKey = "TTTT".
There are four consecutive 'T's.

Example 2:
Input  = TFFT
1
Output = 3

Explanation: We can replace the first 'T' with an 'F' to make answerKey = "FFFT".
Alternatively, we can replace the second 'T' with an 'F' to make answerKey = "TFFF".
In both cases, there are three consecutive 'F's.


Example 3:
Input = TTFTTFTT
1
Output = 5
Explanation: We can replace the first 'F' to make answerKey = "TTTTTFTT"
Alternatively, we can replace the second 'F' to make answerKey = "TTFTTTTT". 
In both cases, there are five consecutive 'T's.




Ram a english student wants to help a programmer to write the property names in the correct form of mutators and accessors. 
Help Ram to do so.

input = name
size
mutators
mutators
output =
setName(datatype name)
setSize(datatype size)


input = marks
age
mutators
accessor
output = 
setMarks(datatype marks)
datatype getAge()


Help Ram to write the necessary Java code to print the output as shown above.
Assume only 2 properties followed by 2 mutators/accessors




empno   ename   job     mgr     hiredate        sal     comm    deptno          
7369    SMITH   CLERK   7902    1993-06-13      800.00  0.00    20              
7499    ALLEN   SALESMAN        7698    1998-08-15      1600.00 300.00  10      
7521    ALLEN   SALESMAN        7698    1996-03-26      1250.00 500.00  30      
7566    JONES   MANAGER 7839    1995-10-31      2975.00 NULL    20              
7654    MARTIN  SALESMAN        7698    1998-12-05      1250.00 1400.00 40      
7698    BLAKE   MANAGER 7839    1992-06-11      2850.00 NULL    30              
7782    CLARK   MANAGER 7839    1993-05-14      2450.00 NULL    10              
7788    SCOTT   ANALYST 7566    1996-03-05      3000.00 NULL    20              
7839    KEVIN   PRESIDENT       NULL    1990-06-09      5000.00 0.00    40      
7844    KEVIN   SALESMAN        7698    1995-06-04      1500.00 0.00    30      
7876    KEVIN   CLERK   7788    1999-06-04      1100.00 NULL    20              
7900    JAMES   CLERK   7698    2000-06-23      950.00  NULL    20              
7902    FORD    ANALYST 7566    1997-12-05      3000.00 NULL    20              
7934    FORD    CLERK   7782    2000-01-21      1300.00 NULL    10 
--------------------------------------
deptno  dname   location                                                        
10      Accounting      New York                                                
20      Research        Dallas                                                  
30      Sales   Chicago                                                         
40      Operations      Boston                                                  
50      Finance Tempe  

--------------------------------------------------------------------------------------------------------------------------

/* Retrieve the names and salaries of employees who have the job title "SALESMAN" and earn more than 1500.

Expected Output Columns:
+------------+-----------+
| ename      | sal       |
+------------+-----------+


*/

-- database name is test
-- write your query here 

USE test; 
select ename , sal
FROM emp
where job = "SALESMAN" and sal>1500;


----------------------------------------------------------------------------------------------------
/* List all employees whose job title is either "MANAGER" or "ANALYST".

Expected Output Columns:
+------------+-----------+
| ename      | job       |
+------------+-----------+


*/
USE test; -- database name is test
-- write your query here

select ename , job
from emp
where job="MANAGER" or job = "ANALYST";
---------------------------------------------------------------------------------------------------------
/* Get all the details of employees who do not belong to department 20.

*/
USE test;

select * from emp where deptno != 20;
-----------------------------------------------------------------------------------------------------
/* Get the employee names and their commission details 
where the job is "CLERK" or the commission is more than 1000.

Expected Output Columns:
+--------+----------+---------+
| ename  | job      | comm    |
+--------+----------+---------+

*/
USE test;

select ename , job , comm
from emp
where job = "CLERK" or comm > 1000;
--------------------------------------------------------------------------------------------------------
/* Get the list of employees who do not have the job title "CLERK" or "SALESMAN".

Expected Output Columns:
+--------+----------+
| ename  | job      |
+--------+----------+

*/
USE test;

select ename, job
from emp 
where job not in ("CLERK","SALESMAN");
--------------------------------------------------------------------------------------------------------
/* Retrieve the names and salaries of employees who earn between 1000 and 3000 (inclusive).

Expected Output Columns:
+--------+----------+
| ename  | sal      |
+--------+----------+

*/
USE test;

select ename, sal 
from emp
where sal between 1000 and 3000;
-------------------------------------------------------------------------------------------------------
/* Retrieve employees who were hired between the years 1995 and 1999.

Expected Output Columns:
+--------+----------+
| ename  | hiredate |
+--------+----------+

*/
USE test;

select ename, hiredate
from emp 
where hiredate between '1995-01-01' and '1999-12-31';

-------------------------------------------------------------------------------------------------------------
/* Retrieve employees who earn a commission between 300 and 1000.

Expected Output Columns:
+--------+----------+
| ename  | comm     |
+--------+----------+

*/
USE test;

select ename , comm
from emp 
where comm between 300 and 1000;
-----------------------------------------------------------------------------------------------------------
/* Retrieve employees who are part of department numbers between 20 and 40.

Expected Output Columns:
+--------+----------+
| ename  | deptno   |
+--------+----------+

*/
USE test;

select ename , deptno
from emp 
where deptno between 20 and 40;

-------------------------------------------------------------------------------------------------------------
/* List all salary grades where the grade is between 2 and 4.

Expected Output Columns:
+------+----------+------------+
|grade |    losal |   hisal    |
+------+----------+------------+

*/
USE test;

select grade , losal, hisal
from salgrade
where grade between 2 and 4;
---------------------------------------------------------------------------------------------------------------
/* Get employees who are not managers and have a salary below 2000.

Expected Output Columns:
+------+----------+------------+
|ename |    job   |   sal      |
+------+----------+------------+

*/
USE test;

select ename, job , sal 
from emp
where job != 'managers' and sal < 2000;
--------------------------------------------------------------------------------------------------------------
/* Retrieve employees who do not report to any manager.

Expected Output Columns:
+------+----------+------------+
|ename |    job   |   mgr      |
+------+----------+------------+

*/
USE test;
select ename , job , mgr
from emp
where mgr is null;
---------------------------------------------------------------------------------------------------------------
/* Get clerks or analysts hired between 1996 and 2000

Expected Output Columns:
+------+-------+------------+
| ID   | Name  | StartDate  |
+------+-------+------------+

*/
USE test;

select empno as ID , ename as Name, hiredate as StartDate
from emp
where job in ("clerk","analyst") and  hiredate between '1996-01-01' and '2000-12-31';
-------------------------------------------------------------------------------------------------------------------
/* List employees with mgr 7788 or 7566 and sal < 3000

Expected Output Columns:
+----------+------+---------+
| Employee | Boss | Salary  |
+----------+------+---------+

*/
USE test;

select ename as Employee , mgr as Boss , sal as Salary
from emp
where mgr = 7788 or mgr = 7566 and sal > 3000;
-------------------------------------------------------------------------------------------------------------------
/* Retrieve employees with 'ar' anywhere in their name

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;

select * 
from emp
where ename like "%ar%";
------------------------------------------------------------------------------------------------------------------
/* Retrieve employees with exactly 5-letter names starting with 'K'.

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;
select *
from emp 
where ename like "K%____";
---------------------------------------------------------------------------------------------------------------------
/* Retrieve employees whose names do not end with 'n'.

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;

select *
from emp
where ename not like "%n";
-----------------------------------------------------------------------------------------------------------------------
/* Retrieve which employees have names starting with 'C' or 'S'.

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;

select * 
from emp 
where ename like "C%" or ename like "S%";
----------------------------------------------------------------------------------------------------------------------------
/* Perform Sum of salaries and commissions by dept 30 

Expected Output Columns:
+----------+------------+
| TotalPay | TotalBonus |
+----------+------------+

*/
USE test;

select sum(sal) as TotalPay , sum(comm) as TotalBonus
from emp 
where deptno = 30;
----------------------------------------------------------------------------------------------------------------------
/* Get Max and min salaries in dept 20 or 40

Expected Output Columns:
+------------+-----------+
| HighestPay | LowestPay |
+------------+-----------+

*/
USE test;

select MAX(sal) as HighestPay , MIN(sal) as LowestPay
from emp
where deptno = 20 or  deptno = 40;
---------------------------------------------------------------------------------------------------------------------------
/* Find employees who earn more than the average salary of all employees.

Expected Output Columns:
------------------------
+-------+---------+
| ename | sal     |
+-------+---------+

*/
USE test;

select * from emp;
select ename , sal from emp where sal > (select AVG(sal) from emp) ;
---------------------------------------------------------------------------------------------------------------------------
/* Find the name and salary of the highest-paid employee.

Expected Output Columns:
------------------------
+-------+---------+
| ename | sal     |
+-------+---------+

*/
USE test;

select ename , sal 
from emp
where sal = (select max(sal) from emp);

-------------------------------------------------------------------------------------------------------------------------------
/* Find employees who earn more than the highest-paid employee in department 10.

Expected Output Columns:
------------------------
+-------+---------+--------+
| ename | sal     | deptno |
+-------+---------+--------+

*/
USE test;

select ename , sal , deptno
from emp 
where sal > (select max(sal) from emp where deptno = 10);
-----------------------------------------------------------------------------------------------------------------------------
/* Find employees whose salary is higher than the salary of ‘SCOTT’.

Expected Output Columns:
------------------------
+-------+---------+
| ename | sal     |
+-------+---------+

*/
USE test;

select ename , sal 
from emp 
where sal > (select sal from emp where ename = "SCOTT");
----------------------------------------------------------------------------------------------------------------------------------
/* Find employee who have the same job title as 'FORD'.

Expected Output Columns:
------------------------
+-------+---------+
| ename | job     |
+-------+---------+

*/
USE test;

select ename , job
from emp 
where job in (select job from emp where ename = "FORD");
-------------------------------------------------------------------------------------------------------------------------------
/* Find departments that have at least one employee earning more than 3000.

Expected Output Columns:
------------------------
+--------+------------+
| deptno | dname      |
+--------+------------+

*/
USE test;



select * from dept;
select * from emp;
 
select dept.deptno , dept.dname
from dept 
join emp  on dept.deptno = emp.deptno
where sal > 3000;
-------------------------------------------------------------------------------------------------------------------------------
/* Find employees who were hired before all employees in department 30.

Expected Output Columns:
------------------------
+-------+------------+
| ename | hiredate   |
+-------+------------+

*/
USE test;

select ename , hiredate
from emp
where hiredate < (select min(hiredate) from emp where deptno = 30);
-----------------------------------------------------------------------------------------------------------------------------
/* Find employees who belong to departments located in 'Dallas'.

Expected Output Columns:
------------------------
+-------+--------+
| ename | deptno |
+-------+--------+

*/
USE test;

select emp.ename , emp.deptno
from emp 
join dept on dept.deptno = emp.deptno
where dept.location = "Dallas";
----------------------------------------------------------------------------------------------------------------------------------
/* Find the second highest salary from employees.

Expected Output Columns:
------------------------
+-----------------------+
| second_highest_salary |
+-----------------------+

*/
USE test;

select sal as second_highest_salary
from emp 
order by sal desc limit 1 offset 1 ;
------------------------------------------------------------------------------------------------------------------------------
/* Find employees who have the same manager as ‘BLAKE’.

Expected Output Columns:
------------------------
+-------+------+
| ename | mgr  |
+-------+------+

*/
USE test;

select ename , mgr
from emp 
where mgr = (select mgr from emp where ename = "BLAKE") and ename != "BLAKE";
-------------------------------------------------------------------------------------------------------------------------------
/* Find employees who belong to a department with no employees.

Expected Output Columns:
------------------------
+---------+
| dname   |
+---------+

*/
USE test;

SELECT d.dname 
FROM dept d
LEFT JOIN emp e ON d.deptno = e.deptno
WHERE e.deptno IS NULL;
---------------------------------------------------------------------------------------------------------------------------------
/* Find the department that has the most employees.

Expected Output Columns:
------------------------
+--------+----------------+
| deptno | employee_count |
+--------+----------------+

*/
USE test;

select deptno , count(empno) as employee_count
from emp
group by deptno
order by employee_count desc
limit 1;
-----------------------------------------------------------------------------------------------------------------------------
/* Find the department name where ‘JONES’ works.

Expected Output Columns:
------------------------
+----------+
| dname    |
+----------+

*/
USE test;

select dname
from dept 
join emp on dept.deptno = emp.deptno
where ename = "JONES";
------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find employees whose name contains ‘A’.

Expected Output Columns:
------------------------
+--------+-------+
| ename  | empno |
+--------+-------+

*/
USE test;

select ename , empno
from emp
where ename like "%A%";
-------------------------------------------------------------------------------------------------------------------------------
/* Retrieve employees who have a commission greater than their salary.

Expected Output Columns:
------------------------
+--------+-------+---------+---------+
| ename  | empno | sal     | comm    |
+--------+-------+---------+---------+

*/
USE test;

select ename , empno , sal , comm
from emp 
where sal < comm;
------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find all employees who do not receive a commission.

Expected Output Columns:
------------------------
+-------+-------+------+
| ename | empno | comm |
+-------+-------+------+

*/
USE test;

select ename , empno , comm
from emp 
where comm is NULL or comm = 0.00;
-----------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to count the number of employees who have a manager.

Expected Output Columns:
------------------------
+------------------------+
| employees_with_manager |
+------------------------+

*/
USE test;

select count(ename) as employees_with_manager
from emp
where mgr != "NULL";
----------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find the difference between the highest and second highest salary.

Expected Output Columns:
------------------------
+-------------------+
| salary_difference |
+-------------------+

*/
USE test;

SELECT 
    (SELECT MAX(sal) FROM emp) - 
    (SELECT MAX(sal) FROM emp WHERE sal < (SELECT MAX(sal) FROM emp)) 
    AS salary_difference;
------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to calculate the average salary and average commission of employees.

Expected Output Columns:
------------------------
+----------------+--------------------+
| Average Salary | Average Commission |
+----------------+--------------------+

*/
USE test;


select AVG(sal) as "Average Salary" , AVG(comm) as "Average Commission"
from emp;
---------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to calculate the total salary and total commission for all employees.

Expected Output Columns:
------------------------
+--------------+------------------+
| Total Salary | Total Commission |
+--------------+------------------+

*/
USE test;

select sum(sal) as "Total Salary" , sum(comm) as "Total Commission"
from emp;
------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to calculate the average salary of employees with a commission.

Expected Output Columns:
------------------------
+----------------------+
| avg_salary_with_comm |
+----------------------+

*/
USE test;


SELECT AVG(sal) AS avg_salary_with_comm
FROM emp
WHERE comm IS NOT NULL;
---------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to determine the minimum commission value, excluding NULLs.

Expected Output Columns:
------------------------
+----------------+
| min_commission |
+----------------+

*/
USE test;

select min(comm) as min_commission
from emp
where comm is not null;
-----------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find the total commission paid to employees hired after 1995.

Expected Output Columns:
------------------------/* Write a SQL query to find the maximum hire date (latest hire) in the emp table.

Expected Output Columns:
------------------------
+-------------+
| latest_hire |
+-------------+

*/
USE test;

select max(hiredate) as latest_hire
from emp;
----------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to calculate the average salary of employees with a commission.

Expected Output Columns:
------------------------
+----------------------+
| avg_salary_with_comm |
+----------------------+

*/
USE test;


SELECT AVG(sal) AS avg_salary_with_comm
FROM emp
WHERE comm IS NOT NULL;
-----------------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to determine the minimum commission value, excluding NULLs.

Expected Output Columns:
------------------------
+----------------+
| min_commission |
+----------------+

*/
USE test;

select min(comm) as min_commission
from emp
where comm is not null;
----------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find the total commission paid to employees hired after 1995.

Expected Output Columns:
------------------------
+----------------------+
| total_comm_post_1995 |
+----------------------+

*/
USE test;

select sum(comm) as total_comm_post_1995
from emp
where hiredate>1995;
------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find the maximum hire date (latest hire) in the emp table.

Expected Output Columns:
------------------------
+-------------+
| latest_hire |
+-------------+

*/
USE test;

select max(hiredate) as latest_hire
from emp;
----------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find the average commission for salesmen, excluding NULLs.

Expected Output Columns:
------------------------
+-------------------+
| avg_salesman_comm |
+-------------------+

*/
USE test;

select avg(comm) as avg_salesman_comm
from emp
where job = "SALESMAN" and comm is not null; 
-------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to determine the minimum salary for employees hired in the 1990s.

Expected Output Columns:
------------------------
+----------------+
| min_salary_90s |
+----------------+

*/
USE test;

select  min(sal) as min_salary_90s
from emp
where hiredate>=1990;
---------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find the total salary of employees whose names start with 'K'.

Expected Output Columns:
------------------------
+----------------+
| total_salary_k |
+----------------+

*/
USE test;

select sum(sal) as total_salary_K
from emp
where ename like "K%";
----------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to count the number of employees hired in each year.

Expected Output Columns:
------------------------
+-----------+----------------+
| hire_year | hires_per_year |
+-----------+----------------+

*/
USE test;

SELECT YEAR(hiredate) AS hire_year, COUNT(*) AS hires_per_year
FROM emp
GROUP BY YEAR(hiredate);

---------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to sum the commissions for employees with salaries below 1500.

Expected Output Columns:
------------------------
+-----------------------+
| total_comm_low_salary |
+-----------------------+

*/
USE test;

select sum(comm) as total_comm_low_salary
from emp
where sal < 1500;

------------------------------------------------------------------------------------------------------------------
/* List employees who do not receive a commission but earn more than 2500.

Expected Output Columns:
------------------------
+-------+---------+------+
| ename | sal     | comm |
+-------+---------+------+

*/
USE test;

select ename , sal , comm
from emp 
where comm is null and sal>2500;
-----------------------------------------------------------------------------------------------------------------
/* Write a SQL query to list employee names and department names for employees 
with a salary greater than 2000.


+-------+------------+
| ename | dname      |
+-------+------------+
*/
USE test; 

select emp.ename , dept.dname
from emp
join dept on dept.deptno = emp.deptno
where sal > 2000;
-------------------------------------------------------------------------------------------------------------
/*Write a SQL query to retrieve all employees and their department locations, 
including those without departments.

+--------+----------+
| ename  | location |
+--------+----------+
*/
USE test; 

select emp.ename, dept.location
from emp
left join dept on dept.deptno = emp.deptno;
------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to list all department numbers, department names and their 
employee counts, including departments with no employees.

+--------+------------+-----------+
| deptno | dname      | emp_count |
+--------+------------+-----------+
*/
USE test;

SELECT dept.deptno, dept.dname, COUNT(emp.ename) AS emp_count
FROM dept
LEFT JOIN emp ON dept.deptno = emp.deptno
GROUP BY dept.deptno, dept.dname
ORDER BY dept.deptno;
-------------------------------------------------------------------------------------------------------------
/* Write a SQL query to simulate a FULL OUTER JOIN to list all employees and 
departments, including unmatched rows.

+-------+--------+--------+------------+
| empno | ename  | deptno | dname      |
+-------+--------+--------+------------+
*/
USE test;

SELECT emp.empno, emp.ename, dept.deptno, dept.dname
FROM emp
LEFT JOIN dept ON emp.deptno = dept.deptno

UNION

SELECT emp.empno, emp.ename, dept.deptno, dept.dname
FROM dept
RIGHT JOIN emp ON emp.deptno = dept.deptno;


-----------------------------------------------------------------------------------------------------------------
/* Write a SQL query to find employees who are managers of other employees.

+---------+
| manager |
+---------+
*/
USE test;

SELECT DISTINCT e1.ename AS manager
FROM emp e1
WHERE e1.empno IN (SELECT DISTINCT e2.mgr FROM emp e2 WHERE e2.mgr IS NOT NULL);

-----------------------------------------------------------------------------------------------------------------------
/*Write a SQL query to generate all possible employee-department combinations.
+--------+------------+
| ename  | dname      |
+--------+------------+
*/
USE test;


select * from emp;

select * from dept;

---------------------------------------------------------------------------------------------------------------------
/*Write a SQL query to find managers and the number of employees they manage in
departments located in 'New York', using the primary key and foreign key 
constraints.

+--------------+-----------+
| manager_name | emp_count |
+--------------+-----------+
*/


USE test;

SELECT m.ename AS manager_name, COUNT(e.empno) AS emp_count
FROM emp e
JOIN emp m ON e.mgr = m.empno  -- Join employees with their managers
JOIN dept d ON e.deptno = d.deptno  -- Ensure employees belong to the department
WHERE d.location = 'New York'
GROUP BY m.ename
ORDER BY emp_count DESC;


----------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to list all employees and departments, including those 
without matches, using a simulated FULL JOIN.


+-------+--------+--------+------------+----------+
| empno | ename  | deptno | dname      | location |
+-------+--------+--------+------------+----------+
*/

USE test;

SELECT e.empno, e.ename, d.deptno, d.dname, d.location
FROM emp e
LEFT JOIN dept d ON e.deptno = d.deptno

UNION

SELECT e.empno, e.ename, d.deptno, d.dname, d.location
FROM emp e
RIGHT JOIN dept d ON e.deptno = d.deptno


------------------------------------------------------------------------------------------------------------------------
/* Write a SQL query to list employee names and department names where the 
department is in 'Chicago'.

+-------+-------+
| ename | dname |
+-------+-------+
*/

USE test;

SELECT e.ename, d.dname
FROM emp e
JOIN dept d ON e.deptno = d.deptno
WHERE d.location = 'Chicago'
ORDER BY e.ename;

------------------------------------------------------------------------------------------------------------------
/*Retrieve Department-wise Total Salary and Number of Employees 


+------------+---------------+--------------+
| dname      | num_employees | total_salary |
+------------+---------------+--------------+

*/
USE test;

SELECT dept.dname, 
       COUNT(emp.empno) AS num_employees, 
       SUM(emp.sal) AS total_salary
FROM dept
LEFT JOIN emp ON dept.deptno = emp.deptno
GROUP BY dept.deptno, dept.dname
ORDER BY dept.deptno;

----------------------------------------------------------------------------------------------------------------------------------------------------------
Customers

Field   Type    Null    Key     Default Extra                                                                           
CustomerID      int     NO      PRI     NULL                                                                            
Name    varchar(255)    YES             NULL                                                                            
Email   varchar(255)    YES             NULL                                                                            
Address varchar(255)    YES             NULL                                                                            
PhoneNumber     varchar(20)     YES             NULL 

Employees

Field   Type    Null    Key     Default Extra      
id      int     NO      PRI     NULL    auto_increment                                                                  
name    varchar(50)     YES             NULL                                                                            
age     int     YES             NULL                                                                                    
department      varchar(50)     YES             NULL                                                                    
salary  double  YES             NULL    


OrderItems

Field   Type    Null    Key     Default Extra                                                                           
OrderItemID     int     NO      PRI     NULL                                                                            
OrderID int     YES     MUL     NULL                                                                                    
ProductID       int     YES     MUL     NULL                                                                            
Quantity        int     YES             NULL                                                                            
UnitPrice       decimal(10,2)   YES             NULL 


Orders

Field           Type            Null     Key     Default Extra                                                                           
OrderID         int             NO      PRI     NULL                                                                                    
CustomerID      int             YES     MUL     NULL                                                                            
OrderDate       date            YES             NULL                                                                            
TotalCost       decimal(10,2)   YES             NULL                                                                    
Status          varchar(20)     YES             NULL 


Products

Field           Type            Null    Key     Default Extra                                                                           
ProductID       int             NO      PRI     NULL                                                                            
Name            varchar(255)    YES             NULL                                                                            
Description     varchar(255)    YES             NULL                                                                    
Price           decimal(10,2)   YES             NULL  


indianPeople

Field         Type            Null    Key     Default Extra                                                                           
name          varchar(100)    YES             NULL                                                                            
age           int             YES             NULL                                                                                    
gender        varchar(10)     YES             NULL                                                                            
phone_number  varchar(15)     YES             NULL                                                                    
location      varchar(50)     YES             NULL                                                                    
salary        decimal(10,2)   YES             NULL
--------------------------------------------------------------------------------------------------------------------------
/*
Write a query to List all orders along with product names and their quantity and price:

Sample Output:

| OrderID | ProductName | Quantity | Price |
|---------|-------------|----------|-------|
| 1001    | Laptop      | 1        | 1000  |

*/
use fs;

SELECT o.OrderID,p.Name AS ProductName,oi.Quantity,oi.UnitPrice AS Price
FROM Orders o
JOIN OrderItems oi ON o.OrderID = oi.OrderID
JOIN Products p ON oi.ProductID = p.ProductID
ORDER BY o.OrderID ASC;
--------------------------------------------------------------------------------------------------------------------------------
/*
Write a query to retrive Customers who ordered more than one type of product in a single order:

Sample Output:

| OrderID | CustomerName | ProductTypes  |
|---------|--------------|---------------|
| 1001    | Alice Johnson| 2             |

*/
use fs;

SELECT 
    o.OrderID,
    c.Name AS CustomerName,
    COUNT(DISTINCT oi.ProductID) AS ProductTypes
FROM 
    Orders o
JOIN 
    Customers c ON o.CustomerID = c.CustomerID
JOIN 
    OrderItems oi ON o.OrderID = oi.OrderID
GROUP BY 
    o.OrderID, c.Name
HAVING 
    COUNT(DISTINCT oi.ProductID) > 1;
-------------------------------------------------------------------------------------------------------------------------
/*
Write a query to retrive All orders with status 'Delivered':

Sample Output:

| OrderID | CustomerID | OrderDate  | TotalCost | Status     |
|---------|------------|------------|-----------|------------|
| 1001    | 1          | 2024-04-01 | 1100      | Delivered  |

*/
use fs;

select * from Orders where status = "Delivered";
--------------------------------------------------------------------------------------------------------------------------
/*
Write a query to  Product name and the number of times it was ordered:

Sample Output:

| ProductName | TimesOrdered  |
|-------------|---------------|
| Laptop      | 2             |

*/

use fs;

SELECT 
    p.Name AS ProductName,
    COUNT(oi.ProductID) AS TimesOrdered
FROM 
    OrderItems oi
JOIN 
    Products p ON oi.ProductID = p.ProductID
GROUP BY 
    p.Name;
----------------------------------------------------------------------------------------------------------------------
/*Write a query to Count orders placed on each distinct date:

Sample Output:

| OrderDate  | OrdersCount |
|------------|-------------|
| 2024-04-01 | 2           |

*/

use fs;


select OrderDate , count(orderID) as OrdersCount
from Orders
GROUP BY 
    OrderDate
----------------------------------------------------------------------------------------------------------------------------
/*
Write a query to display Product names with customer names who ordered them:

Sample Output:

| ProductName | CustomerName   |
|-------------|----------------|
| Laptop      | Alice Johnson  |
*/
use fs;

use fs;
select distinct Products.Name as ProductName, Customers.Name as CustomerName
from Customers 
join Orders on Customers.CustomerID = Orders.CustomerID
join OrderItems on Orders.OrderID = OrderItems.OrderID
join Products on OrderItems.ProductID = Products.ProductID;

---------------------------------------------------------------------------------------------------------------------
/*
Write a query to display Employee names along with others in the same department:

Sample Output:

| Employee | Colleague | department |
|----------|-----------|------------|
| John     | Sarah     | IT         |

*/

use fs;
----------------------------------------------------------------------------------------------------------------------
/*
Write a query to display Customers whose names start with 'A' or 'B':


Sample Output:

| CustomerID | Name           | Email               | Phone      |
|------------|----------------|---------------------|------------|
| 1          | Alice Johnson  | alice@example.com   | 1234567890 |

*/

use fs;
-------------------------------------------------------------------------------------------------------------------------
/*
Write a query to display Products priced between 200 and 700:

Sample Output:

| ProductID | Name       | Price |
|-----------|------------|-------|
| 102       | Smartphone | 600   |

*/
use fs;
-------------------------------------------------------------------------------------------------------------------------

